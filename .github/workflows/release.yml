name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.19.x]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        sudo apt-get install -y libzxing-dev

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg install zxing-cpp:x64-windows

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake
        brew install zxing-cpp

    - name: Build
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          .\build.bat
        else
          chmod +x build.sh
          ./build.sh
        fi

    - name: Run tests
      run: go test -v ./...

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/libzxing.so
        asset_name: libzxing-linux.so
        asset_content_type: application/octet-stream

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/zxing.dll
        asset_name: zxing-windows.dll
        asset_content_type: application/octet-stream

    - name: Upload Release Asset (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/libzxing.dylib
        asset_name: libzxing-darwin.dylib
        asset_content_type: application/octet-stream 