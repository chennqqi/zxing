name: Benchmark

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # 每周日运行

jobs:
  benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, rocky-9]
        go-version: [1.19.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      timeout-minutes: 15
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        # 尝试安装系统包
        sudo apt-get install -y libzxing-dev || true
        # 如果系统包不存在，从源码编译
        if ! pkg-config --exists zxing-cpp && ! pkg-config --exists zxing; then
          git clone https://github.com/zxing-cpp/zxing-cpp.git --recursive --single-branch --depth 1
          mkdir build && cd build
          cmake -S .. -B . -DCMAKE_BUILD_TYPE=Release
          cmake --build . -j$(nproc) --config Release
          sudo make install
          sudo ldconfig
        fi
        sudo apt-get install -y python3

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      timeout-minutes: 15
      run: |
        vcpkg install zxing-cpp:x64-windows
        python -m pip install --upgrade pip

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      timeout-minutes: 15
      run: |
        brew install cmake
        brew install zxing-cpp
        brew install python3

    - name: Install dependencies (Rocky Linux)
      if: matrix.os == 'rocky-9'
      timeout-minutes: 15
      run: |
        # 安装 EPEL 源
        sudo dnf install -y epel-release
        sudo dnf update -y
        sudo dnf install -y gcc-c++ make cmake
        # 尝试安装系统包
        sudo dnf install -y zxing-cpp-devel || true
        # 如果系统包不存在，从源码编译
        if ! pkg-config --exists zxing-cpp && ! pkg-config --exists zxing; then
          git clone https://github.com/zxing-cpp/zxing-cpp.git --recursive --single-branch --depth 1
          cd zxing-cpp
          mkdir build && cd build
          cmake -S .. -B . -DCMAKE_BUILD_TYPE=Release
          cmake --build . -j$(nproc) --config Release
          sudo make install
          sudo ldconfig
        fi
        sudo dnf install -y python3

    - name: Build
      timeout-minutes: 15
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          .\build.bat
        else
          chmod +x build.sh
          ./build.sh
        fi

    - name: Run benchmarks
      timeout-minutes: 15
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          .\scripts\benchmark.bat
        else
          chmod +x scripts/benchmark.sh
          ./scripts/benchmark.sh
        fi

    - name: Find benchmark report
      id: find_report
      run: |
        REPORT_PATH=$(find benchmark_results -name benchmark_report.md)
        echo "path=$REPORT_PATH" >> $GITHUB_OUTPUT

    - name: Upload benchmark report
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-report-${{ matrix.os }}
        path: ${{ steps.find_report.outputs.path }}
        if-no-files-found: error

    - name: Download previous benchmark report
      if: github.event_name == 'pull_request'
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: benchmark.yml
        branch: main
        name: benchmark-report-${{ matrix.os }}
        path: benchmark_results/previous
        github_token: ${{ secrets.GITHUB_TOKEN }}
        if_no_artifact_found: 'ignore'

    - name: Compare with previous results
      if: github.event_name == 'pull_request'
      run: |
        if [ -f "benchmark_results/previous/benchmark_report.md" ]; then
          echo "Comparing with previous results..."
          CURRENT_REPORT=$(find benchmark_results -name benchmark_report.md -not -path "*/previous/*")
          echo "Current report: $CURRENT_REPORT"
          diff "${CURRENT_REPORT}" "benchmark_results/previous/benchmark_report.md" || true
        else
          echo "No previous results found for comparison"
        fi 